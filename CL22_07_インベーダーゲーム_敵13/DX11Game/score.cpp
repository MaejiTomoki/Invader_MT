//=============================================================================
//
// スコア表示処理 [score.cpp]
// Author : HIROHIKO HAMAYA
//
//=============================================================================
#include "score.h"
#include "polygon.h"
#include "Texture.h"
#include "number.h"



//*****************************************************************************
// グローバル変数
//*****************************************************************************
int CScore::m_nScore;



CScore::CScore()
{

}

CScore::~CScore()
{

}



//=============================================================================
// スコア表示の初期化処理
//=============================================================================
HRESULT CScore::Init()
{
	// テクスチャ読み込み
	HRESULT hr = CreateTextureFromFile(GetDevice(),
		FRAME_TEXTURENAME, &m_pTexture);

	// スコア初期化
	m_nScore = 0;

	m_vPos = XMFLOAT2(SCORE_POS_X, SCORE_POS_Y);

	return hr;
}

//=============================================================================
// スコア表示の終了処理
//=============================================================================
void CScore::Uninit()
{
	// テクスチャ開放
	SAFE_RELEASE(m_pTexture);
}

//=============================================================================
// スコア表示の更新処理
//=============================================================================
void CScore::Update()
{
	// (何もしない)
}

//=============================================================================
// スコア表示処理
//=============================================================================
void CScore::Draw()
{
	ID3D11DeviceContext* pDeviceContext =
		GetDeviceContext();

	// 全体を明るい緑で表示
	SetPolygonColor(0.0f, 1.0f, 0.0f);

	// スコア枠描画
	SetPolygonPos(FRAME_POS_X, FRAME_POS_Y);
	SetPolygonSize(FRAME_SIZE_X, FRAME_SIZE_Y);
	SetPolygonTexture(m_pTexture);
	DrawPolygon(pDeviceContext);

	// スコア表示
	DrawNumber(&m_vPos,
		(unsigned)m_nScore, SCORE_WIDTH);

	// 色を元に戻す
	SetPolygonColor(1.0f, 1.0f, 1.0f);
}

//=============================================================================
// スコア加算
//=============================================================================
void CScore::AddScore(int nValue)
{
	m_nScore += nValue;
}

//=============================================================================
// スコア取得
//=============================================================================
int CScore::GetScore()
{
	return m_nScore;
}
